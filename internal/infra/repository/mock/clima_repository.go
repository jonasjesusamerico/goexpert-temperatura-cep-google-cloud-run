// Code generated by mockery v2.43.0. DO NOT EDIT.

package mock

import (
	domain "goexpert-temperature-system-by-cep/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ClimaRepository is an autogenerated mock type for the ClimaRepository type
type ClimaRepository struct {
	mock.Mock
}

type WeatherRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ClimaRepository) EXPECT() *WeatherRepository_Expecter {
	return &WeatherRepository_Expecter{mock: &_m.Mock}
}

// BuscaClimaPorLocalizacao provides a mock function with given fields: location
func (_m *ClimaRepository) BuscaClimaPorLocalizacao(location string) (*domain.Clima, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for BuscaClimaPorLocalizacao")
	}

	var r0 *domain.Clima
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Clima, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Clima); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Clima)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WeatherRepository_GetWeatherByLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuscaClimaPorLocalizacao'
type WeatherRepository_GetWeatherByLocation_Call struct {
	*mock.Call
}

// BuscaClimaPorLocalizacao is a helper method to define mock.On call
//   - location string
func (_e *WeatherRepository_Expecter) BuscaClimaPorLocalizacao(location interface{}) *WeatherRepository_GetWeatherByLocation_Call {
	return &WeatherRepository_GetWeatherByLocation_Call{Call: _e.mock.On("BuscaClimaPorLocalizacao", location)}
}

func (_c *WeatherRepository_GetWeatherByLocation_Call) Run(run func(location string)) *WeatherRepository_GetWeatherByLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *WeatherRepository_GetWeatherByLocation_Call) Return(_a0 *domain.Clima, _a1 error) *WeatherRepository_GetWeatherByLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WeatherRepository_GetWeatherByLocation_Call) RunAndReturn(run func(string) (*domain.Clima, error)) *WeatherRepository_GetWeatherByLocation_Call {
	_c.Call.Return(run)
	return _c
}

// NewWeatherRepository creates a new instance of ClimaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClimaRepository {
	mock := &ClimaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
